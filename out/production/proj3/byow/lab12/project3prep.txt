Q: Can you think of an analogy between the process of tesselating hexagons and randomly generating a worldGenerator using rooms and hallways?
What is the hexagon and what is the tesselation on the Project 3 side?

A: The analogy is that tesselating is like figuring out where to place rooms and hallways and generating hexagons is like creating those rooms and hallways.

-----
Q: If you were to start working on worldGenerator generation, what kind of method would you think of writing first?
Think back to the lab and the process used to eventually get to tesselating hexagons.

A: Building rooms and hallways.

-----
Q: What distinguishes a hallway from a room? How are they similar?

A: A room has a row and column size greater than 3 (wall, room, wall).

-----
Q: For tesselating hexagons, one of the hardest parts is figuring out where to place each hexagon/how to easily place hexagons on screen in an algorithmic way. 
After looking at your own implemention, consider the implementation provided near the end of the lab. 
How did your implementation differ from the given one? What lessons can be learned from it?

A: The given implementation used a startegy that was deeply abstracted. We tried to do too much in our regular method. Although we came close to a solution, the given solution is much cleaner.

-----
Q: Consider an algorithm for placing rooms and hallways on your map. 
Ideally, consider many algorithms and think about what makes some easier or harder to implement. Try and bring those ideas together into a single simple algorithm which accomplishes the task. 
In general, algorithms with as few edge cases as possible are better algorithms.

A: An overlaying algorithm might work well. One would start with a large chamber and then populate the chamber with hallways that intersect and end up with rooms as a result.
